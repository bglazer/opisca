functionality:
  name: python_starter_kit
  namespace: predict_modality_starter_kits
  
  # metadata for your method
  version: dev
  description: EaRL (Expression and Representation Learner) is a graph neural network designed to jointly learn to predict patterns fo gene, protein, and chromatin accessibility. The graph that EaRL uses for neural message passing is composed from several public biological interaction databases. This includes proteins transcribed from genes, and genomic regions corresponding to genes. In addition I included protein-protein, transcription factor-target, and enhancer-gene gene interactions. EaRL is trained using OpenAI's REPTILE metalearning algorithm to learn an initialization of the parameters that can quickly adapt to predicting each modality. 
  authors:
    - name: Bryan Glazer
      email: bryan.glazer@vanderbilt.edu
      roles: [ author, maintainer ]
      props: { github: bglazer, orcid: "0000-0002-0434-7672" }
      
  # parameters
  arguments:
    # required inputs
    - name: "--input_train_mod1"
      type: "file"
      example: "dataset_mod1.h5ad"
      description: Censored dataset, training cells.
      required: true
    - name: "--input_test_mod1"
      type: "file"
      example: "dataset_mod1.h5ad"
      description: Censored dataset, test cells.
      required: true
    - name: "--input_train_mod2"
      type: "file"
      example: "dataset_mod2.h5ad"
      description: Censored dataset.
      required: true
    # required outputs
    - name: "--output"
      type: "file"
      direction: "output"
      example: "output.h5ad"
      description: Dataset with predicted values for modality2.
      required: true
    # additional parameters
    - name: "--distance_method"
      type: "string"
      default: "minkowski"
      description: The distance metric to use. Possible values include `euclidean` and `minkowski`.
      
  # files your script needs
  resources:
    - type: pretrained_model
      path: script.py
  
  # resources for unit testing your component
  tests:
    - type: python_script
      path: test.py
    - path: sample_data
      
# target platforms
platforms:

  # By specifying 'docker' platform, viash will build a standalone
  # executable which uses docker in the back end to run your method.
  - type: docker
    # you need to specify a base image that contains at least bash and python
    image: pytorch/pytorch:1.9.0-cuda11.1-cudnn8-runtime
    # You can specify additional dependencies with 'setup'. 
    # See https://viash.io/docs/reference_config/platform-docker/#setup-list
    # for more information on how to add more dependencies.
    setup:
      # - type: apt
      #   packages:
      #     - bash
      # - type: python
      #   packages:
      #     - scanpy
      - type: docker
        run: [ conda install pyg -c pyg -c conda-forge ]
      - type: python
        packages:
          - anndata
          - scanpy
          - pyg
          - numpy

  # By specifying a 'nextflow', viash will also build a viash module
  # which uses the docker container built above to also be able to 
  # run your method as part of a nextflow pipeline.
  - type: nextflow
    labels: [ lowmem, lowtime, lowcpu ]
